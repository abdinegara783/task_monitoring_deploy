# Generated by Django 5.1.1 on 2025-09-28 07:16

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('nrp', models.CharField(blank=True, max_length=20, null=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('telegram_chat_id', models.CharField(blank=True, help_text='Telegram Chat ID untuk notifikasi', max_length=50, null=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('superadmin', 'Super Admin'), ('leader', 'Leader'), ('foreman', 'Foreman')], default='foreman', max_length=20)),
                ('department', models.CharField(blank=True, choices=[('SUPPORT', 'Support & Fabrikasi'), ('TRACK', 'Track'), ('PLANT', 'PCH'), ('WHEEL', 'Wheel')], max_length=100, null=True)),
                ('shift', models.IntegerField(choices=[(1, 'Shift 1'), (2, 'Shift 2')], default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('leader', models.ForeignKey(blank=True, limit_choices_to={'role': 'leader'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='foremen', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nrp', models.CharField(help_text='Nomor Registrasi Pegawai', max_length=20)),
                ('section', models.CharField(choices=[('PC1250', 'PC1250'), ('CAT395', 'CAT395'), ('DX800', 'DX800'), ('PC500', 'PC500'), ('PC300', 'PC300'), ('PC200/210', 'PC200/210'), ('D375', 'D375'), ('D155', 'D155'), ('D85', 'D85'), ('EPIROC DM30', 'EPIROC DM30'), ('HD785', 'HD785'), ('VOLVO FMX400', 'VOLVO FMX400'), ('GD955', 'GD955'), ('GD535', 'GD535'), ('GD160K/M', 'GD160K/M'), ('DYNAPAC COMPACTOR', 'DYNAPAC COMPACTOR'), ('HD465/WT', 'HD465/WT'), ('RENAULT FT/LB', 'RENAULT FT/LB'), ('HINO WT/LT/CT', 'HINO WT/LT/CT'), ('MANITAOU', 'MANITAOU'), ('KATO CRANE', 'KATO CRANE'), ('GENSET', 'GENSET'), ('WATER PUMP (WP)', 'WATER PUMP (WP)'), ('HINO DT', 'HINO DT'), ('MERCY DT', 'MERCY DT'), ('BOMAG COMPACTOR', 'BOMAG COMPACTOR'), ('TL', 'TL')], help_text='Section/Track', max_length=100)),
                ('date', models.DateField(help_text='Tanggal laporan')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('foreman', models.ForeignKey(limit_choices_to={'role': 'foreman'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity Report',
                'verbose_name_plural': 'Activity Reports',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnalysisReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_track', models.CharField(blank=True, choices=[('PC1250', 'PC1250'), ('CAT395', 'CAT395'), ('DX800', 'DX800'), ('PC500', 'PC500'), ('PC300', 'PC300'), ('PC200/210', 'PC200/210'), ('D375', 'D375'), ('D155', 'D155'), ('D85', 'D85'), ('EPIROC DM30', 'EPIROC DM30'), ('HD785', 'HD785'), ('VOLVO FMX400', 'VOLVO FMX400'), ('GD955', 'GD955'), ('GD535', 'GD535'), ('GD160K/M', 'GD160K/M'), ('DYNAPAC COMPACTOR', 'DYNAPAC COMPACTOR'), ('HD465/WT', 'HD465/WT'), ('RENAULT FT/LB', 'RENAULT FT/LB'), ('HINO WT/LT/CT', 'HINO WT/LT/CT'), ('MANITAOU', 'MANITAOU'), ('KATO CRANE', 'KATO CRANE'), ('GENSET', 'GENSET'), ('WATER PUMP (WP)', 'WATER PUMP (WP)'), ('HINO DT', 'HINO DT'), ('MERCY DT', 'MERCY DT'), ('BOMAG COMPACTOR', 'BOMAG COMPACTOR'), ('TL', 'TL')], max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True)),
                ('no_report', models.CharField(blank=True, max_length=100, null=True)),
                ('report_date', models.DateField()),
                ('WO_Number', models.CharField(blank=True, max_length=100, null=True)),
                ('WO_date', models.DateField()),
                ('unit_code', models.CharField(blank=True, max_length=100, null=True)),
                ('problem', models.CharField(blank=True, choices=[('1000', 'Engine'), ('2000', 'Clutch System'), ('3000', 'Transmission'), ('4000', 'Travel Dive-Axle'), ('5000', 'Steering'), ('6000', 'Undercariage'), ('7000', 'Electric'), ('8000', 'Attachment'), ('9000', 'Periodical Services')], max_length=100, null=True)),
                ('Trouble_date', models.DateField()),
                ('Hm', models.CharField(blank=True, max_length=100, null=True)),
                ('title_problem', models.TextField()),
                ('part_no', models.CharField(blank=True, max_length=100, null=True)),
                ('part_name', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('nama_fungsi_komponen', models.TextField(blank=True, help_text='Jelaskan nama dan fungsi komponen yang bermasalah', null=True, verbose_name='Nama & Fungsi Komponen')),
                ('gejala_masalah', models.TextField(blank=True, help_text='Deskripsikan gejala masalah yang dihadapi', null=True, verbose_name='Gejala Masalah yang Dihadapi')),
                ('akar_penyebab_masalah', models.TextField(blank=True, help_text='Jelaskan akar penyebab masalah berdasarkan analisis', null=True, verbose_name='Akar Penyebab Masalah')),
                ('faktor_man', models.TextField(blank=True, help_text='Jelaskan faktor manusia yang berkontribusi terhadap masalah (contoh: Terjadi kelalaian pada saat monitoring)', null=True, verbose_name='Man (Manusia)')),
                ('faktor_material', models.TextField(blank=True, help_text='Jelaskan faktor material yang berkontribusi terhadap masalah', null=True, verbose_name='Material')),
                ('faktor_machine', models.TextField(blank=True, help_text='Jelaskan faktor mesin yang berkontribusi terhadap masalah', null=True, verbose_name='Machine (Mesin)')),
                ('faktor_method', models.TextField(blank=True, help_text='Jelaskan faktor metode yang berkontribusi terhadap masalah', null=True, verbose_name='Method (Metode)')),
                ('faktor_environment', models.TextField(blank=True, help_text='Jelaskan faktor lingkungan yang berkontribusi terhadap masalah', null=True, verbose_name='Environment (Lingkungan)')),
                ('tindakan_dilakukan', models.TextField(blank=True, help_text='Jelaskan tindakan yang telah dilakukan untuk mengatasi masalah', null=True, verbose_name='Tindakan yang Dilakukan')),
                ('tindakan_pencegahan', models.TextField(blank=True, help_text='Jelaskan tindakan pencegahan untuk mencegah masalah serupa', null=True, verbose_name='Tindakan Pencegahan')),
                ('dokumentasi_sebelum', models.FileField(blank=True, help_text='Upload gambar/drawing sebelum perbaikan (Max 1MB)', null=True, upload_to='analysis_reports/before/', verbose_name='Dokumentasi Sebelum')),
                ('dokumentasi_sesudah', models.FileField(blank=True, help_text='Upload gambar/drawing sesudah perbaikan (Max 1MB)', null=True, upload_to='analysis_reports/after/', verbose_name='Dokumentasi Sesudah')),
                ('foreman', models.ForeignKey(limit_choices_to={'role': 'foreman'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Analysis Report',
                'verbose_name_plural': 'Analysis Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeaderQuota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leader_name', models.CharField(max_length=100)),
                ('leader_username', models.CharField(max_length=150, unique=True)),
                ('max_foreman', models.PositiveIntegerField(default=0)),
                ('current_foreman_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leader_user', models.ForeignKey(blank=True, limit_choices_to={'role': 'leader'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quota_as_leader', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Leader Quota',
                'verbose_name_plural': 'Leader Quotas',
            },
        ),
        migrations.CreateModel(
            name='ActivityReportDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_number', models.PositiveIntegerField(help_text='Nomor urut aktivitas (1-5)')),
                ('unit_code', models.CharField(help_text='Unit Code untuk aktivitas ini', max_length=100)),
                ('hm_km', models.CharField(help_text='HM/KM untuk aktivitas ini', max_length=100)),
                ('start_time', models.TimeField(help_text='Waktu mulai aktivitas')),
                ('stop_time', models.TimeField(help_text='Waktu selesai aktivitas')),
                ('component', models.CharField(choices=[('Component_1', 'Engine'), ('Component_2', 'Clutch - Couper'), ('Component_3', 'PTO'), ('Component_4', 'Transmisi'), ('Component_5', 'Final Drive'), ('Component_6', 'Travel - Axle'), ('Component_7', 'Steering'), ('Component_8', 'Under Carriage'), ('Component_9', 'Wheel'), ('Component_10', 'Frame & Guard'), ('Component_11', 'Electric'), ('Component_12', 'Brake'), ('Component_13', 'Suspension'), ('Component_14', 'Hydraulic'), ('Component_15', 'Pneumatic'), ('Component_16', 'Swing System'), ('Component_17', 'Attachment'), ('Component_18', 'GET'), ('Component_19', 'Vessel Assy'), ('Component_20', 'Generating Set'), ('Component_21', 'Dewatering Pump'), ('Component_22', 'Optional Accessories'), ('Component_23', 'Tank & Piping'), ('Component_24', 'AC'), ('Component_25', 'Stone Crusher'), ('Component_26', 'Daily Maintenance'), ('Component_27', '12 Mounth Service'), ('Component_28', '6 Mounth Service'), ('Component_29', '90 Days Service'), ('Component_30', '30 Days Service'), ('Component_31', '10 Dayts Service'), ('Component_32', 'PPA'), ('Component_33', 'PPU'), ('Component_34', 'PPM'), ('Component_35', 'PAP'), ('Component_36', '4000 Hour Service'), ('Component_37', '2000 Hour Service'), ('Component_38', '1000 Hour Service'), ('Component_39', '500 Hour Service'), ('Component_40', '250 Hour Service'), ('Component_41', '100 Hour Service (Inisial)'), ('Component_42', '50 Hour Service (inisial)'), ('Component_43', '100 Hour Dialy Check'), ('Component_44', 'Component Overhaul'), ('Component_45', 'Component Midlive'), ('Component_46', '20.000 KM Service'), ('Component_47', '15.000 KM Service'), ('Component_48', '10.000 KM Service'), ('Component_49', '5.000 KM Service'), ('Component_50', '2.500 KM Service')], help_text='Komponen yang dikerjakan', max_length=100)),
                ('activities', models.TextField(help_text='Deskripsi aktivitas yang dilakukan')),
                ('activity_code', models.CharField(choices=[('SC', 'SC'), ('USC', 'USC'), ('ACD', 'ACD')], help_text='Kode aktivitas (SC/USC/ACD)', max_length=10)),
                ('activity_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='dashboard.activityreport')),
            ],
            options={
                'verbose_name': 'Activity Report Detail',
                'verbose_name_plural': 'Activity Report Details',
                'ordering': ['activity_report', 'activity_number'],
                'unique_together': {('activity_report', 'activity_number')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Judul notifikasi', max_length=200)),
                ('message', models.TextField(help_text='Isi pesan notifikasi')),
                ('status', models.CharField(choices=[('unread', 'Belum Dibaca'), ('read', 'Sudah Dibaca')], default='unread', help_text='Status baca notifikasi', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Waktu notifikasi dibuat')),
                ('read_at', models.DateTimeField(blank=True, help_text='Waktu notifikasi dibaca', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Admin yang mengirim notifikasi', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(help_text='Penerima notifikasi', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notifikasi',
                'verbose_name_plural': 'Notifikasi',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['recipient', 'status'], name='dashboard_n_recipie_e252db_idx'), models.Index(fields=['created_at'], name='dashboard_n_created_526fd9_idx')],
            },
        ),
    ]
